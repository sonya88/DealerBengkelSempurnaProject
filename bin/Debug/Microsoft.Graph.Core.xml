<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Graph.Core</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Graph.CoreConstants">
            <summary>
            Constants for the Graph Core library.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.PollingIntervalInMs">
            <summary>
            Polling interval for task completion.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.CoreConstants.Headers">
            <summary>
            Header constants.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Headers.Bearer">
            Authorization bearer.
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Headers.SdkVersionHeaderName">
            SDK Version header
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Headers.SdkVersionHeaderValueFormatString">
            SDK Version header
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Headers.FormUrlEncodedContentType">
            Content-Type header
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Headers.ThrowSiteHeaderName">
            Throw-site header
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Headers.ClientRequestId">
            Client Request Id
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Headers.FeatureFlag">
            Feature Flag
        </member>
        <member name="T:Microsoft.Graph.CoreConstants.MimeTypeNames">
            <summary>
            MimeType constants.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.CoreConstants.MimeTypeNames.Application">
            <summary>
            MimeTypeNames.Application constants.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.MimeTypeNames.Application.Json">
            JSON content type value
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.MimeTypeNames.Application.Stream">
            Stream content type value
        </member>
        <member name="T:Microsoft.Graph.CoreConstants.Serialization">
            <summary>
            Serialization constants.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Serialization.ODataType">
            OData type
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Serialization.ODataNextLink">
            OData next link
        </member>
        <member name="T:Microsoft.Graph.CoreConstants.BatchRequest">
            <summary>
            Batch request constants.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.BatchRequest.MaxNumberOfRequests">
            <summary>
            Maximum number of individual requests.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.CoreConstants.Encoding">
            <summary>
            Encoding constants
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.Encoding.GZip">
            gzip encoding.
        </member>
        <member name="T:Microsoft.Graph.CoreConstants.OdataInstanceAnnotations">
            <summary>
            Constants used to specify OData instance annotations.
            https://www.odata.org/vocabularies/
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.OdataInstanceAnnotations.NextLink">
            <summary>
            The nextLink annotations string.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.CoreConstants.OdataInstanceAnnotations.DeltaLink">
            <summary>
            The deltaLink annotations string.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.AuthenticationException">
            <summary>
            Generic exception class to report unknown exceptions during authentication
            </summary>
        </member>
        <member name="M:Microsoft.Graph.AuthenticationException.#ctor(Microsoft.Graph.Error,System.Exception)">
            <summary>
            Creates a new authentication exception.
            </summary>
            <param name="error">The error that triggered the exception.</param>
            <param name="innerException">The possible inner exception.</param>
        </member>
        <member name="P:Microsoft.Graph.AuthenticationException.Error">
            <summary>
            The error from the authentication exception.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.ClientException">
            <summary>
            Graph client exception.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ClientException.#ctor(Microsoft.Graph.Error,System.Exception)">
            <summary>
            Creates a new client exception.
            </summary>
            <param name="error">The error that triggered the exception.</param>
            <param name="innerException">The possible innerException.</param>
        </member>
        <member name="T:Microsoft.Graph.Error">
            <summary>
            The error object contained in 400 and 500 responses returned from the service.
            Models OData protocol, 9.4 Error Response Body
            http://docs.oasis-open.org/odata/odata/v4.01/csprd05/part1-protocol/odata-v4.01-csprd05-part1-protocol.html#_Toc14172757
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.Code">
            <summary>
            This code represents the HTTP status code when this Error object accessed from the ServiceException.Error object.
            This code represent a sub-code when the Error object is in the InnerError or ErrorDetails object.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.Target">
            <summary>
            Indicates the target of the error, for example, the name of the property in error.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.Details">
            <summary>
            An array of details that describe the error[s] encountered with the request.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.InnerError">
            <summary>
            The inner error of the response. These are additional error objects that may be more specific than the top level error.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.ThrowSite">
            <summary>
            The Throw site of the error.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.ClientRequestId">
            <summary>
            Gets or set the client-request-id header returned in the response headers collection. 
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Error.AdditionalData">
            <summary>
            The AdditionalData property bag.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Error.GetFieldDeserializers">
            <summary>
            Gets the field deserializers for the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.Error.Serialize(Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter)">
            <summary>
            Serializes the class using the the given writer
            </summary>
            <param name="writer">The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter"/> to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided writer is null</exception>
        </member>
        <member name="M:Microsoft.Graph.Error.CreateFromDiscriminatorValue(Microsoft.Kiota.Abstractions.Serialization.IParseNode)">
            <summary>
            Creates a new instance of the appropriate class based on discriminator value
            <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Error.ToString">
            <summary>
            Concatenates the error into a string.
            </summary>
            <returns>A human-readable string error response.</returns>
        </member>
        <member name="T:Microsoft.Graph.ErrorDetail">
            <summary>
            The error details object.
            Models OData protocol, 9.4 Error Response Body details object.
            http://docs.oasis-open.org/odata/odata/v4.01/csprd05/part1-protocol/odata-v4.01-csprd05-part1-protocol.html#_Toc14172757
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ErrorDetail.Code">
            <summary>
            This code serves as a sub-status for the error code specified in the Error object.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ErrorDetail.Message">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ErrorDetail.Target">
            <summary>
            Indicates the target of the error, for example, the name of the property in error.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ErrorDetail.AdditionalData">
            <summary>
            The AdditionalData property bag.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ErrorDetail.GetFieldDeserializers">
            <summary>
            Gets the field deserializers for the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.ErrorDetail.Serialize(Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter)">
            <summary>
            Serializes the class using the the given writer
            </summary>
            <param name="writer">The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter"/> to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided writer is null</exception>
        </member>
        <member name="M:Microsoft.Graph.ErrorDetail.CreateFromDiscriminatorValue(Microsoft.Kiota.Abstractions.Serialization.IParseNode)">
            <summary>
            Creates a new instance of the appropriate class based on discriminator value
            <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ErrorDetail.ToString">
            <summary>
            Concatenates the error detail into a string.
            </summary>
            <returns>A string representation of an ErrorDetail object.</returns>
        </member>
        <member name="T:Microsoft.Graph.ErrorResponse">
            <summary>
            The error response object from the service on an unsuccessful call.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ErrorResponse.Error">
            <summary>
            The <see cref="P:Microsoft.Graph.ErrorResponse.Error"/> returned by the service.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ErrorResponse.AdditionalData">
            <summary>
            Additional data returned in the call.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ErrorResponse.GetFieldDeserializers">
            <summary>
            Gets the field deserializers for the class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.ErrorResponse.Serialize(Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter)">
            <summary>
            Serializes the class using the the given writer
            </summary>
            <param name="writer">The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter"/> to use</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the provided writer is null</exception>
        </member>
        <member name="M:Microsoft.Graph.ErrorResponse.CreateFromDiscriminatorValue(Microsoft.Kiota.Abstractions.Serialization.IParseNode)">
            <summary>
            Creates a new instance of the appropriate class based on discriminator value
            <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            </summary>
        </member>
        <member name="T:Microsoft.Graph.ServiceException">
            <summary>
            Graph service exception.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ServiceException.#ctor(Microsoft.Graph.Error,System.Exception)">
            <summary>
            Creates a new service exception.
            </summary>
            <param name="error">The error that triggered the exception.</param>
            <param name="innerException">The possible innerException.</param>
        </member>
        <member name="M:Microsoft.Graph.ServiceException.#ctor(Microsoft.Graph.Error,System.Net.Http.Headers.HttpResponseHeaders,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Creates a new service exception.
            </summary>
            <param name="error">The error that triggered the exception.</param>
            <param name="innerException">The possible innerException.</param>
            <param name="responseHeaders">The HTTP response headers from the response.</param>
            <param name="statusCode">The HTTP status code from the response.</param>
        </member>
        <member name="M:Microsoft.Graph.ServiceException.#ctor(Microsoft.Graph.Error,System.Net.Http.Headers.HttpResponseHeaders,System.Net.HttpStatusCode,System.String,System.Exception)">
            <summary>
            Creates a new service exception.
            </summary>
            <param name="error">The error that triggered the exception.</param>
            <param name="innerException">The possible innerException.</param>
            <param name="responseHeaders">The HTTP response headers from the response.</param>
            <param name="statusCode">The HTTP status code from the response.</param>
            <param name="rawResponseBody">The raw JSON response body.</param>
        </member>
        <member name="P:Microsoft.Graph.ServiceException.Error">
            <summary>
            The error from the service exception.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ServiceException.ResponseHeaders">
            <summary>
            The HTTP response headers from the response.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ServiceException.StatusCode">
            <summary>
            The HTTP status code from the response.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ServiceException.RawResponseBody">
            <summary>
            Provide the raw JSON response body.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ServiceException.IsMatch(System.String)">
            <summary>
            Checks if a given error code has been returned in the response at any level in the error stack.
            </summary>
            <param name="errorCode">The error code.</param>
            <returns>True if the error code is in the stack.</returns>
        </member>
        <member name="M:Microsoft.Graph.ServiceException.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.Graph.HttpClientExtensions.SetFeatureFlag(System.Net.Http.HttpClient,Microsoft.Graph.FeatureFlag)">
            <summary>
            Adds featureflag to existing header values.
            </summary>
            <param name="httpClient">The http client to set FeatureUsage header.</param>
            <param name="featureFlag">The Feature usage flag to set.</param>
        </member>
        <member name="M:Microsoft.Graph.HttpClientExtensions.ContainsFeatureFlag(System.Net.Http.HttpClient,Microsoft.Graph.FeatureFlag)">
            <summary>
            Checks if a featureflag existing in the default header values.
            </summary>
            <param name="httpClient">The http client to set FeatureUsage header.</param>
            <param name="featureFlag">The Feature usage flag to check for.</param>
        </member>
        <member name="T:Microsoft.Graph.HttpRequestMessageExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.HttpRequestMessageExtensions.GetFeatureFlags(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get's feature request header value from the incoming <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="httpRequestMessage">The <see cref="T:System.Net.Http.HttpRequestMessage"/> object</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.HttpRequestMessageExtensions.CloneAsync(System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a new HTTP request by copying previous HTTP request's headers and properties from response's request message.
            </summary>
            <param name="originalRequest">The previous <see cref="T:System.Net.Http.HttpRequestMessage"/> needs to be copy.</param>
            <returns>The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</returns>
            <remarks>
            Re-issue a new HTTP request with the previous request's headers and properities
            </remarks>
        </member>
        <member name="M:Microsoft.Graph.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)">
            <summary>
            Gets a <see cref="T:Microsoft.Graph.GraphRequestContext"/> from <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="httpRequestMessage">The <see cref="T:System.Net.Http.HttpRequestMessage"/> representation of the request.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Graph.IDecryptableContentExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Graph.IDecryptableContentExtensions"/>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.IDecryptableContentExtensions.DecryptAsync``1(Microsoft.Graph.IDecryptableContent,System.Func{System.String,System.String,System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}})">
            <summary>
            Validates the signature and decrypted content attached with the notification.
            </summary>
            <typeparam name="T">Type to deserialize the data to.</typeparam>
            <param name="encryptedContent">The encrypted content of type <see cref="T:Microsoft.Graph.IDecryptableContent"/></param>
            <param name="certificateProvider">Certificate provider to decrypt the content.
            The first parameter is the certificate ID provided when creating the subscription.
            The second is the certificate thumbprint. The certificate WILL be disposed at the end of decryption.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="certificateProvider"/> is null</exception>
            <returns>Decrypted content as the provided type.</returns>
        </member>
        <member name="M:Microsoft.Graph.IDecryptableContentExtensions.DecryptAsync(Microsoft.Graph.IDecryptableContent,System.Func{System.String,System.String,System.Threading.Tasks.Task{System.Security.Cryptography.X509Certificates.X509Certificate2}})">
            <summary>
            Validates the signature and decrypted content attached with the notification.
            https://docs.microsoft.com/en-us/graph/webhooks-with-resource-data#decrypting-resource-data-from-change-notifications 
            </summary>
            <param name="encryptedContent">The encrypted content of type <see cref="T:Microsoft.Graph.IDecryptableContent"/></param>
            <param name="certificateProvider">Certificate provider to decrypt the content.
            The first parameter is the certificate ID provided when creating the subscription.
            The second is the certificate thumbprint. The certificate WILL be disposed at the end of decryption.</param>
            <exception cref="T:System.IO.InvalidDataException">Thrown when the <see cref="P:Microsoft.Graph.IDecryptableContent.DataSignature"/> value does not match the signature in the payload</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="certificateProvider"/> is null</exception>
            <exception cref="T:System.ApplicationException">Thrown when there is a failure in attempting to decrypt the information</exception>
            <returns>Decrypted content as string.</returns>
        </member>
        <member name="T:Microsoft.Graph.IEncryptableSubscriptionExtensions">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Graph.IEncryptableSubscription"/>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.IEncryptableSubscriptionExtensions.AddPublicEncryptionCertificate(Microsoft.Graph.IEncryptableSubscription,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Adds the public encryption certificate information for change notifications with resource data to the subscription creation information.
            </summary>
            <param name="subscription">The subscription instance of type <see cref="T:Microsoft.Graph.IEncryptableSubscription"/></param>
            <param name="certificate">Certificate to use for encryption</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="certificate"/> is null</exception>
        </member>
        <member name="T:Microsoft.Graph.ITokenValidableExtension">
            <summary>
            Contains extension methods for <see cref="T:Microsoft.Graph.ITokenValidableExtension"/>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ITokenValidableExtension.AreTokensValid``2(Microsoft.Graph.ITokenValidable{``0,``1},System.Collections.Generic.IEnumerable{System.Guid},System.Collections.Generic.IEnumerable{System.Guid},System.String,System.String)">
            <summary>
            Validates tokens attached with the notification collection. If the result is false, the notification collection should be discarded.
            </summary>
            <param name="collection">Collection instance of <see cref="T:Microsoft.Graph.ITokenValidable`2"/></param>
            <param name="tenantIds">List of tenant ids that notifications might be originating from.</param>
            <param name="appIds">List of application id (client ids) that subscriptions have been created from.</param>
            <param name="wellKnownUri">Well known URL to get the signing certificates for the tokens.
            If you are not using the public cloud you need to pass the value corresponding to your national deployment.</param>
            <param name="issuerPrefix">Issuer prefix for the "aud" claim in the tokens.
            If you are not using the public cloud you need to pass the value corresponding to your national deployment.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="tenantIds"/> or <paramref name="appIds"/> is null or empty</exception>
            <returns>Are tokens valid or not.</returns>
        </member>
        <member name="T:Microsoft.Graph.ExpressionExtractHelper">
            <summary>
            Helper class to extract $select or $expand parameters from strongly-typed expressions.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ExpressionExtractHelper.ExtractMembers``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String@)">
            <summary>
            Extract referenced members of the type T from the given expression as a list of strings
            </summary>
            <param name="expression">The expression to search</param>
            <param name="error">Message about what's wrong with the expression if return value is null</param>
            <returns>A comma-separated list of strings or null</returns>
        </member>
        <member name="T:Microsoft.Graph.ReadOnlySubStream">
            <summary>
            Helper stream class to represent a slice of a larger stream to save memory when dealing with large streams
            and remove the extra copy operations
            This class is inspired from System.IO.Compression in dot net core. Reference implementation can be found here
            https://github.com/dotnet/corefx/blob/d59f6e5a1bdabdd05317fd727efb59345e328b80/src/System.IO.Compression/src/System/IO/Compression/ZipCustomStreams.cs#L147
            </summary>
        </member>
        <member name="T:Microsoft.Graph.StringHelper">
            <summary>
            Helper class for string casing.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.StringHelper.ConvertTypeToTitleCase(System.String)">
            <summary>
            Converts the type string to title case.
            </summary>
            <param name="typeString">The type string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Microsoft.Graph.StringHelper.ConvertTypeToLowerCamelCase(System.String)">
            <summary>
            Converts the type string to lower camel case.
            </summary>
            <param name="typeString">The type string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Microsoft.Graph.StringHelper.ConvertIdentifierToLowerCamelCase(System.String)">
            <summary>
            Converts the identifier string to lower camel case.
            </summary>
            <param name="identifierString">The identifier string.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="T:Microsoft.Graph.UrlHelper">
            <summary>
            Helper class for working with URLs.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.UrlHelper.GetQueryOptions(System.Uri)">
            <summary>
            Parse query options from the URL.
            </summary>
            <param name="resultUri"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Graph.HttpMethods">
            <summary>
            Enum used specify Http methods
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.GET">
            <summary>
            The GET method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.POST">
            <summary>
            The POST method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.PATCH">
            <summary>
            The PATCH method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.PUT">
            <summary>
            The PUT method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.DELETE">
            <summary>
            The DELETE method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.HEAD">
            <summary>
            The HEAD method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.CONNECT">
            <summary>
            The CONNECT method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.OPTIONS">
            <summary>
            The OPTIONS method.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.HttpMethods.TRACE">
            <summary>
            The TRACE method.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.AsyncOperationStatus">
            <summary>
            The type AsyncOperationStatus.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.AsyncOperationStatus.Operation">
            <summary>
            Gets or sets operation.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.AsyncOperationStatus.PercentageComplete">
            <summary>
            Gets or sets percentageComplete.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.AsyncOperationStatus.Status">
            <summary>
            Gets or sets status.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.AsyncOperationStatus.AdditionalData">
            <summary>
            Gets or sets additional data.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.AsyncOperationStatus.GetFieldDeserializers">
            <summary>
            Gets the field deserializers for the <see cref="T:Microsoft.Graph.AsyncOperationStatus"/> instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.AsyncOperationStatus.Serialize(Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter)">
            <summary>
            Serialize the <see cref="T:Microsoft.Graph.AsyncOperationStatus"/> instance
            </summary>
            <param name="writer">The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter"/> to serialize the instance</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the writer is null</exception>
        </member>
        <member name="T:Microsoft.Graph.BatchRequestStep">
            <summary>
            A single batch request step.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.BatchRequestStep.RequestId">
            <summary>
            A unique batch request id property.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.BatchRequestStep.Request">
            <summary>
            A http request message for an individual batch request operation.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.BatchRequestStep.DependsOn">
            <summary>
            An OPTIONAL array of batch request ids specifying the order of execution for individual batch requests.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestStep.#ctor(System.String,System.Net.Http.HttpRequestMessage,System.Collections.Generic.List{System.String})">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.BatchRequestStep"/>.
            </summary>
            <param name="requestId">A unique batch request id.</param>
            <param name="httpRequestMessage">A http request message for an individual batch request operation.</param>
            <param name="dependsOn">An OPTIONAL array of batch request ids specifying the order of execution for individual batch requests.</param>
        </member>
        <member name="T:Microsoft.Graph.IDecryptableContent">
            <summary>
            The IDecryptableContent interface
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IDecryptableContent.Data">
            <summary>
            The Data string
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IDecryptableContent.DataKey">
            <summary>
            The DataKey string
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IDecryptableContent.DataSignature">
            <summary>
            The DataSignature string
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IDecryptableContent.EncryptionCertificateId">
            <summary>
            The EncryptionCertificateId string
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IDecryptableContent.EncryptionCertificateThumbprint">
            <summary>
            The EncryptionCertificateThumbprint string
            </summary>
        </member>
        <member name="T:Microsoft.Graph.IEncryptableSubscription">
            <summary>
            The IEncryptableSubscription interface
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IEncryptableSubscription.EncryptionCertificate">
            <summary>
            The encryption certificate
            </summary>
        </member>
        <member name="T:Microsoft.Graph.IEncryptedContentBearer`1">
            <summary>
            The IEncryptedContentBearer interface
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IEncryptedContentBearer`1.EncryptedContent">
            <summary>
            The encrypted content
            </summary>
        </member>
        <member name="T:Microsoft.Graph.ITokenValidable`2">
            <summary>
            The ITokenValidable interface
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ITokenValidable`2.ValidationTokens">
            <summary>
            The collection of validation tokens
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ITokenValidable`2.Value">
            <summary>
            The collection of encrypted token bearers
            </summary>
        </member>
        <member name="T:Microsoft.Graph.IUploadSession">
            <summary>
            The IUploadSession interface
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IUploadSession.ExpirationDateTime">
            <summary>
            Expiration date of the upload session
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IUploadSession.NextExpectedRanges">
            <summary>
            The ranges yet to be uploaded to the server
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IUploadSession.UploadUrl">
            <summary>
            The URL for upload
            </summary>
        </member>
        <member name="T:Microsoft.Graph.ReferenceRequestBody">
            <summary>
            The reference request body.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.ReferenceRequestBody.ODataId">
            <summary>
            The OData.id value.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.UploadResult`1">
            <summary>
            Result that we get from uploading a slice
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Microsoft.Graph.UploadResult`1.UploadSession">
            <summary>
            The UploadSession containing information about the created upload session.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.UploadResult`1.ItemResponse">
            <summary>
            The uploaded item, once upload has completed.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.UploadResult`1.Location">
            <summary>
            The uploaded item location, once upload has completed.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.UploadResult`1.UploadSucceeded">
            <summary>
            Status of the request.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Core.Models.UploadSession">
            <summary>
            Concrete implementation of the IUploadSession interface
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Core.Models.UploadSession.ExpirationDateTime">
            <summary>
            Expiration date of the upload session
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Core.Models.UploadSession.NextExpectedRanges">
            <summary>
            The ranges yet to be uploaded to the server
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Core.Models.UploadSession.UploadUrl">
            <summary>
            The URL for upload
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Core.Models.UploadSession.AdditionalData">
            <summary>
            Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Core.Models.UploadSession.GetFieldDeserializers">
            <summary>
            The deserialization information for the current model
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Core.Models.UploadSession.Serialize(Microsoft.Kiota.Abstractions.Serialization.ISerializationWriter)">
            <summary>
            Serializes information the current object
            <param name="writer">Serialization writer to use to serialize this model</param>
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Core.Models.UploadSession.CreateFromDiscriminatorValue(Microsoft.Kiota.Abstractions.Serialization.IParseNode)">
            <summary>
            Creates a new instance of the appropriate class based on discriminator value
            <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            </summary>
        </member>
        <member name="T:Microsoft.Graph.Core.Requests.BatchRequestBuilder">
            <summary>
            The type BatchRequestBuilder
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Core.Requests.BatchRequestBuilder.#ctor(Microsoft.Kiota.Abstractions.IRequestAdapter)">
            <summary>
            Constructs a new BatchRequestBuilder.
            </summary>
            <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        </member>
        <member name="P:Microsoft.Graph.Core.Requests.BatchRequestBuilder.UrlTemplate">
            <summary>
            Url template to use to build the URL for the current request builder
            </summary>
        </member>
        <member name="P:Microsoft.Graph.Core.Requests.BatchRequestBuilder.RequestAdapter">
            <summary>
            The request adapter to use to execute the requests.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.Core.Requests.BatchRequestBuilder.PostAsync(Microsoft.Graph.BatchRequestContent,System.Threading.CancellationToken)">
            <summary>
            Sends out the <see cref="T:Microsoft.Graph.BatchRequestContent"/> using the POST method
            </summary>
            <param name="batchRequestContent">The <see cref="T:Microsoft.Graph.BatchRequestContent"/> for the request</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to use for cancelling requests</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.Core.Requests.BatchRequestBuilder.CreatePostRequestInformationAsync(Microsoft.Graph.BatchRequestContent)">
            <summary>
            Create <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> instance to post to batch endpoint
            <param name="batchRequestContent">The <see cref="T:Microsoft.Graph.BatchRequestContent"/> for the request</param>
            </summary>
        </member>
        <member name="T:Microsoft.Graph.AsyncMonitor`1">
            <summary>
            Monitor for async operations to the Graph service on the client.
            </summary>
            <typeparam name="T">The object type to return.</typeparam>
        </member>
        <member name="M:Microsoft.Graph.AsyncMonitor`1.#ctor(Microsoft.Graph.IBaseClient,System.String)">
            <summary>
            Construct an Async Monitor.
            </summary>
            <param name="client">The client to monitor.</param>
            <param name="monitorUrl">The URL to monitor.</param>
        </member>
        <member name="M:Microsoft.Graph.AsyncMonitor`1.PollForOperationCompletionAsync(System.IProgress{Microsoft.Graph.AsyncOperationStatus},System.Threading.CancellationToken)">
            <summary>
            Poll to check for completion of an async call to the Graph service.
            </summary>
            <param name="progress">The progress status.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The operation task.</returns>
        </member>
        <member name="T:Microsoft.Graph.BaseClient">
            <summary>
            A default client implementation.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.BaseClient.#ctor(Microsoft.Kiota.Abstractions.IRequestAdapter)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.BaseClient"/>.
            </summary>
            <param name="requestAdapter">The custom <see cref="T:Microsoft.Kiota.Abstractions.IRequestAdapter"/> to be used for making requests</param>
        </member>
        <member name="M:Microsoft.Graph.BaseClient.#ctor(System.String,Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.BaseClient"/>.
            </summary>
            <param name="baseUrl">The base service URL. For example, "https://graph.microsoft.com/v1.0."</param>
            <param name="authenticationProvider">The <see cref="T:Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider"/> for authenticating request messages.</param>
        </member>
        <member name="M:Microsoft.Graph.BaseClient.#ctor(System.String,System.Net.Http.HttpClient)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.BaseClient"/>.
            </summary>
            <param name="baseUrl">The base service URL. For example, "https://graph.microsoft.com/v1.0."</param>
            <param name="httpClient">The customized <see cref="T:System.Net.Http.HttpClient"/> to be used for making requests</param>
        </member>
        <member name="P:Microsoft.Graph.BaseClient.RequestAdapter">
            <summary>
            Gets the <see cref="T:Microsoft.Kiota.Abstractions.IRequestAdapter"/> for sending requests.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.BaseClient.Batch">
            <summary>
            Gets the <see cref="T:Microsoft.Graph.Core.Requests.BatchRequestBuilder"/> for building batch Requests
            </summary>
        </member>
        <member name="T:Microsoft.Graph.BaseGraphRequestAdapter">
            <summary>
            The <see cref="T:Microsoft.Kiota.Abstractions.IRequestAdapter"/> instance for use with microsoft graph
            </summary>
        </member>
        <member name="M:Microsoft.Graph.BaseGraphRequestAdapter.#ctor(Microsoft.Kiota.Abstractions.Authentication.IAuthenticationProvider,Microsoft.Graph.GraphClientOptions,Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory,Microsoft.Kiota.Abstractions.Serialization.ISerializationWriterFactory,System.Net.Http.HttpClient)">
            <summary>
            The public constructor for <see cref="T:Microsoft.Graph.BaseGraphRequestAdapter"/>
            </summary>
            <param name="authenticationProvider">The authentication provider.</param>
            <param name="graphClientOptions">The options for the graph client</param>
            <param name="parseNodeFactory">The parse node factory.</param>
            <param name="serializationWriterFactory">The serialization writer factory.</param>
            <param name="httpClient">The native HTTP client.</param>
        </member>
        <member name="T:Microsoft.Graph.BatchRequestContent">
            <summary>
            A <see cref="T:System.Net.Http.HttpContent"/> implementation to handle json batch requests.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.BatchRequestContent.BatchRequestSteps">
            <summary>
            A BatchRequestSteps property.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.BatchRequestContent.RequestAdapter">
            <summary>
            The request adapter for sending the batch request
            </summary>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.#ctor(Microsoft.Graph.IBaseClient)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.BatchRequestContent"/>.
            </summary>
            <param name="baseClient">The <see cref="T:Microsoft.Graph.IBaseClient"/> for making requests</param>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.#ctor(Microsoft.Graph.IBaseClient,Microsoft.Graph.BatchRequestStep[])">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.BatchRequestContent"/>.
            </summary>
            <param name="baseClient">The <see cref="T:Microsoft.Graph.IBaseClient"/> for making requests</param>
            <param name="batchRequestSteps">A list of <see cref="T:Microsoft.Graph.BatchRequestStep"/> to add to the batch request content.</param>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.AddBatchRequestStep(Microsoft.Graph.BatchRequestStep)">
            <summary>
            Adds a <see cref="T:Microsoft.Graph.BatchRequestStep"/> to batch request content if doesn't exists.
            </summary>
            <param name="batchRequestStep">A <see cref="T:Microsoft.Graph.BatchRequestStep"/> to add.</param>
            <returns>True or false based on addition or not addition of the provided <see cref="T:Microsoft.Graph.BatchRequestStep"/>. </returns>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.AddBatchRequestStep(System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds a <see cref="T:System.Net.Http.HttpRequestMessage"/> to batch request content.
            </summary>
            <param name="httpRequestMessage">A <see cref="T:System.Net.Http.HttpRequestMessage"/> to use to build a <see cref="T:Microsoft.Graph.BatchRequestStep"/> to add.</param>
            <returns>The requestId of the newly created <see cref="T:Microsoft.Graph.BatchRequestStep"/></returns>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.AddBatchRequestStep(Microsoft.Kiota.Abstractions.RequestInformation)">
            <summary>
            Adds a <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> to batch request content
            </summary>
            <param name="requestInformation">A <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> to use to build a <see cref="T:Microsoft.Graph.BatchRequestStep"/> to add.</param>
            <returns>The requestId of the  newly created <see cref="T:Microsoft.Graph.BatchRequestStep"/></returns>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.RemoveBatchRequestStepWithId(System.String)">
            <summary>
            Removes a <see cref="T:Microsoft.Graph.BatchRequestStep"/> from batch request content for the specified id.
            </summary>
            <param name="requestId">A unique batch request id to remove.</param>
            <returns>True or false based on removal or not removal of a <see cref="T:Microsoft.Graph.BatchRequestStep"/>.</returns>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.GetBatchRequestContentAsync">
            <summary>
            Get the content of the batchRequest in the form of a stream.
            It is the responsibility of the caller to dispose of the stream returned.
            </summary>
            <returns>A stream object with the contents of the batch request</returns>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            Serialize the HTTP content to a stream as an asynchronous operation.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.BatchRequestContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <param name="length">The length in bytes of the HTTP content.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Graph.BatchResponseContent">
            <summary>
            Handles batch request responses.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.#ctor(System.Net.Http.HttpResponseMessage)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.BatchResponseContent"/>
            </summary>
            <param name="httpResponseMessage">A <see cref="T:System.Net.Http.HttpResponseMessage"/> of a batch request execution.</param>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.GetResponsesAsync">
            <summary>
            Gets all batch responses <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            All <see cref="T:System.Net.Http.HttpResponseMessage"/> in the dictionary MUST be disposed since they implement <see cref="T:System.IDisposable"/>.
            </summary>
            <returns>A Dictionary of id and <see cref="T:System.Net.Http.HttpResponseMessage"/> representing batch responses.</returns>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.GetResponseByIdAsync(System.String)">
            <summary>
            Gets a batch response as <see cref="T:System.Net.Http.HttpResponseMessage"/> for the specified batch request id.
            The returned <see cref="T:System.Net.Http.HttpResponseMessage"/> MUST be disposed since it implements an <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="requestId">A batch request id.</param>
            <returns>A <see cref="T:System.Net.Http.HttpResponseMessage"/> response object for a batch request.</returns>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.GetResponseByIdAsync``1(System.String,Microsoft.Kiota.Abstractions.IResponseHandler)">
            <summary>
            Gets a batch response as a requested type for the specified batch request id.
            </summary>
            <param name="requestId">A batch request id.</param>
            <param name="responseHandler">ResponseHandler to use for the resonse</param>
            <returns>A deserialized object of type T<see cref="T:System.Net.Http.HttpResponseMessage"/>.</returns>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.GetResponseStreamByIdAsync(System.String)">
            <summary>
            Gets a batch response content as a stream
            </summary>
            <param name="requestId">A batch request id.</param>
            <returns>The response stream of the batch response object</returns>
            <remarks> Stream should be dispose once done with.</remarks>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.GetNextLinkAsync">
            <summary>
            Gets the @NextLink of a batch response.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.GetResponseMessageFromJObject(System.Text.Json.JsonElement)">
            <summary>
            Gets a <see cref="T:System.Net.Http.HttpResponseMessage"/> from <see cref="T:System.Text.Json.JsonElement"/> representing a batch response item.
            </summary>
            <param name="jResponseItem">A single batch response item of type <see cref="T:System.Text.Json.JsonElement"/>.</param>
            <returns>A single batch response as a <see cref="T:System.Net.Http.HttpResponseMessage"/>.</returns>
        </member>
        <member name="M:Microsoft.Graph.BatchResponseContent.GetBatchResponseContentAsync">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpContent"/> of a batch response as a <see cref="T:System.Text.Json.JsonDocument"/>.
            </summary>
            <returns>A batch response content as <see cref="T:System.Text.Json.JsonDocument"/>.</returns>
        </member>
        <member name="T:Microsoft.Graph.DeltaResponseHandler`1">
            <summary>
            PREVIEW 
            A response handler that exposes the list of changes returned in a response.
            This supports scenarios where the service expresses changes to 'null'. The
            deserializer can't express changes to null so you can now discover if a property
            has been set to null. This is intended for use with a Delta query scenario.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.DeltaResponseHandler`1.#ctor(Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.DeltaResponseHandler`1"/>.
            </summary>
            <param name="parseNodeFactory"> The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory"/> to use for response handling</param>
        </member>
        <member name="M:Microsoft.Graph.DeltaResponseHandler`1.HandleResponseAsync``2(``0,System.Collections.Generic.Dictionary{System.String,Microsoft.Kiota.Abstractions.Serialization.ParsableFactory{Microsoft.Kiota.Abstractions.Serialization.IParsable}})">
            <summary>
            Process raw HTTP response into requested domain type.
            </summary>
            <typeparam name="NativeResponseType">The type of the response</typeparam>
            <typeparam name="ModelType">The type to return</typeparam>
            <param name="response">The HttpResponseMessage to handle</param>
            <param name="errorMappings">The errorMappings to use in the event of failed requests</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.DeltaResponseHandler`1.GetResponseString(System.Net.Http.HttpResponseMessage)">
            <summary>
            Get the response content string
            </summary>
            <param name="hrm">The response object</param>
            <returns>The full response string to return</returns>
        </member>
        <member name="M:Microsoft.Graph.DeltaResponseHandler`1.GetResponseBodyWithChangelist(System.String)">
            <summary>
            Gets the response with change lists set on each item.
            </summary>
            <param name="deltaResponseBody">The entire response body as a string.</param>
            <returns>A task with a string representation of the response body. The changes are set on each response item.</returns>
        </member>
        <member name="M:Microsoft.Graph.DeltaResponseHandler`1.DiscoverChangedProperties(System.Text.Json.JsonElement)">
            <summary>
            Inspects the response item and captures the list of properties on a new property
            named 'changes'.
            </summary>
            <param name="responseItem">The item to inspect for properties.</param>
            <returns>The item with the 'changes' property set on it.</returns>
        </member>
        <member name="M:Microsoft.Graph.DeltaResponseHandler`1.GetObjectProperties(System.Text.Json.JsonElement,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Gets all changes on the object.
            </summary>
            <param name="changedObject">The responseItem to inspect for changes.</param>
            <param name="changes">The list of properties returned in the response.</param>
            <param name="parentName">The parent object of this changed object.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.DeltaResponseHandler`1.AddOrReplacePropertyToObject(System.Text.Json.JsonElement,System.String,System.Object)">
            <summary>
            Adds a property with the given property name to the JsonElement object. This function is currently necessary as
            <see cref="T:System.Text.Json.JsonElement"/> is currently readonly.
            </summary>
            <param name="jsonElement">The Original JsonElement to add/replace a property</param>
            <param name="propertyName">The property name to use</param>
            <param name="newItem">The object to be added</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Graph.FeatureFlag">
            <summary>
            Feature Flags
            </summary>
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.None">
            None set
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.RedirectHandler">
            Redirect Handler
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.RetryHandler">
            Retry Handler
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.AuthHandler">
            Auth Handler
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.DefaultHttpProvider">
            Default Handler
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.LoggingHandler">
            Logging Handler
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.ServiceDiscoveryHandler">
            Service Discovery Handler
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.CompressionHandler">
            Compression Handler
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.ConnectionPoolManager">
            Connection Pool Manager
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.LongRunningOperationHandler">
            Long Running Operation Handler 
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.BatchRequestContext">
            Batch Request Content Used
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.PageIteratorTask">
            Page Iterator task Used
        </member>
        <member name="F:Microsoft.Graph.FeatureFlag.FileUploadTask">
            File Upload task Used
        </member>
        <member name="T:Microsoft.Graph.GraphClientFactory">
            <summary>
            GraphClientFactory class to create the HTTP client
            </summary>
        </member>
        <member name="F:Microsoft.Graph.GraphClientFactory.defaultTimeout">
            The default value for the overall request timeout.
        </member>
        <member name="F:Microsoft.Graph.GraphClientFactory.cloudList">
            Microsoft Graph service national cloud endpoints
        </member>
        <member name="F:Microsoft.Graph.GraphClientFactory.Global_Cloud">
            Global endpoint
        </member>
        <member name="F:Microsoft.Graph.GraphClientFactory.USGOV_Cloud">
            US_GOV endpoint
        </member>
        <member name="F:Microsoft.Graph.GraphClientFactory.USGOV_DOD_Cloud">
            US_GOV endpoint
        </member>
        <member name="F:Microsoft.Graph.GraphClientFactory.China_Cloud">
            China endpoint
        </member>
        <member name="F:Microsoft.Graph.GraphClientFactory.Germany_Cloud">
            Germany endpoint
        </member>
        <member name="M:Microsoft.Graph.GraphClientFactory.Create(Microsoft.Graph.GraphClientOptions,System.String,System.String,System.Net.IWebProxy,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new <see cref="T:System.Net.Http.HttpClient"/> instance configured with the handlers provided.
            </summary>
            <param name="version">The graph version to use.</param>
            <param name="nationalCloud">The national cloud endpoint to use.</param>
            <param name="graphClientOptions">The <see cref="T:Microsoft.Graph.GraphClientOptions"/> to use with the client</param>
            <param name="proxy">The proxy to be used with created client.</param>
            <param name="finalHandler">The last HttpMessageHandler to HTTP calls.
            The default implementation creates a new instance of <see cref="T:System.Net.Http.HttpClientHandler"/> for each HttpClient.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.GraphClientFactory.Create(System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler},System.String,System.String,System.Net.IWebProxy,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates a new <see cref="T:System.Net.Http.HttpClient"/> instance configured with the handlers provided.
            </summary>
            <param name="version">The graph version to use.</param>
            <param name="nationalCloud">The national cloud endpoint to use.</param>
            <param name="handlers">An ordered list of <see cref="T:System.Net.Http.DelegatingHandler"/> instances to be invoked as an
            <see cref="T:System.Net.Http.HttpRequestMessage"/> travels from the <see cref="T:System.Net.Http.HttpClient"/> to the network and an
            <see cref="T:System.Net.Http.HttpResponseMessage"/> travels from the network back to <see cref="T:System.Net.Http.HttpClient"/>.
            The handlers are invoked in a top-down fashion. That is, the first entry is invoked first for
            an outbound request message but last for an inbound response message.</param>
            <param name="proxy">The proxy to be used with created client.</param>
            <param name="finalHandler">The last HttpMessageHandler to HTTP calls.</param>
            <returns>An <see cref="T:System.Net.Http.HttpClient"/> instance with the configured handlers.</returns>
        </member>
        <member name="M:Microsoft.Graph.GraphClientFactory.CreateDefaultHandlers(Microsoft.Graph.GraphClientOptions)">
            <summary>
            Create a default set of middleware for calling Microsoft Graph
            </summary>
            <param name="graphClientOptions">The <see cref="T:Microsoft.Graph.GraphClientOptions"/> to use with the client</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.GraphClientFactory.CreatePipeline(System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler},System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates an instance of an <see cref="T:System.Net.Http.HttpMessageHandler"/> using the <see cref="T:System.Net.Http.DelegatingHandler"/> instances
            provided by <paramref name="handlers"/>. The resulting pipeline can be used to manually create <see cref="T:System.Net.Http.HttpClient"/>
            or <see cref="T:System.Net.Http.HttpMessageInvoker"/> instances with customized message handlers.
            </summary>
            <param name="finalHandler">The inner handler represents the destination of the HTTP message channel.</param>
            <param name="handlers">An ordered list of <see cref="T:System.Net.Http.DelegatingHandler"/> instances to be invoked as part
            of sending an <see cref="T:System.Net.Http.HttpRequestMessage"/> and receiving an <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            The handlers are invoked in a top-down fashion. That is, the first entry is invoked first for
            an outbound request message but last for an inbound response message.</param>
            <returns>The HTTP message channel.</returns>
        </member>
        <member name="M:Microsoft.Graph.GraphClientFactory.CreatePipelineWithFeatureFlags(System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler},System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates an instance of an <see cref="T:System.Net.Http.HttpMessageHandler"/> using the <see cref="T:System.Net.Http.DelegatingHandler"/> instances
            provided by <paramref name="handlers"/>. The resulting pipeline can be used to manually create <see cref="T:System.Net.Http.HttpClient"/>
            or <see cref="T:System.Net.Http.HttpMessageInvoker"/> instances with customized message handlers.
            </summary>
            <param name="finalHandler">The inner handler represents the destination of the HTTP message channel.</param>
            <param name="handlers">An ordered list of <see cref="T:System.Net.Http.DelegatingHandler"/> instances to be invoked as part
            of sending an <see cref="T:System.Net.Http.HttpRequestMessage"/> and receiving an <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            The handlers are invoked in a top-down fashion. That is, the first entry is invoked first for
            an outbound request message but last for an inbound response message.</param>
            <returns>A tuple with The HTTP message channel and FeatureFlag for the handlers.</returns>
        </member>
        <member name="M:Microsoft.Graph.GraphClientFactory.GetNativePlatformHttpHandler(System.Net.IWebProxy)">
            <summary>
            Gets a platform's native http handler i.e. NSUrlSessionHandler for Xamarin.iOS and Xamarin.Mac, AndroidClientHandler for Xamarin.Android and HttpClientHandler for others.
            </summary>
            <param name="proxy">The proxy to be used with created client.</param>
            <returns>
            1. NSUrlSessionHandler for Xamarin.iOS and Xamarin.Mac
            2. AndroidClientHandler for Xamarin.Android.
            3. HttpClientHandler for other platforms.
            </returns>
        </member>
        <member name="M:Microsoft.Graph.GraphClientFactory.GetHandlerFeatureFlag(System.Net.Http.DelegatingHandler)">
            <summary>
            Gets feature flag for the specified handler.
            </summary>
            <param name="delegatingHandler">The <see cref="T:System.Net.Http.DelegatingHandler"/> to get its feaure flag.</param>
            <returns>Delegating handler feature flag.</returns>
        </member>
        <member name="T:Microsoft.Graph.GraphClientOptions">
            <summary>
            The options for setting up a given graph client
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphClientOptions.GraphServiceTargetVersion">
            <summary>
            The target version of the api endpoint we are targeting (v1 or beta)
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphClientOptions.GraphServiceLibraryClientVersion">
            <summary>
            The version of the service library in use. Should be in the format `x.x.x` (Semantic version)
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphClientOptions.GraphCoreClientVersion">
            <summary>
            The version of the core library in use. Should be in the format `x.x.x` (Semantic version).
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphClientOptions.GraphProductPrefix">
            <summary>
            The product prefix to use in setting the telemetry headers.
            Will default to `graph-dotnet` if not set.
            </summary>
        </member>
        <member name="T:Microsoft.Graph.GraphRequestContext">
            <summary>
            The graph request context class
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphRequestContext.ClientRequestId">
            <summary>
            A ClientRequestId property
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphRequestContext.CancellationToken">
            <summary>
            A CancellationToken property
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphRequestContext.FeatureUsage">
            <summary>
            A FeatureUsage property
            </summary>
        </member>
        <member name="T:Microsoft.Graph.GraphResponse">
            <summary>
            The GraphResponse Object
            </summary>
        </member>
        <member name="M:Microsoft.Graph.GraphResponse.#ctor(Microsoft.Kiota.Abstractions.RequestInformation,System.Net.Http.HttpResponseMessage)">
            <summary>
            The GraphResponse Constructor
            </summary>
            <param name="requestInformation">The Request made for the response</param>
            <param name="httpResponseMessage">The response</param>
        </member>
        <member name="P:Microsoft.Graph.GraphResponse.StatusCode">
            <summary>
            The Response Status code
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphResponse.Content">
            <summary>
            The Response Content
            </summary>
        </member>
        <member name="P:Microsoft.Graph.GraphResponse.HttpHeaders">
            <summary>
            The Response Headers
            </summary>
        </member>
        <member name="F:Microsoft.Graph.GraphResponse.RequestInformation">
            <summary>
            The reference to the original request
            </summary>
        </member>
        <member name="M:Microsoft.Graph.GraphResponse.ToHttpResponseMessage">
            <summary>
            Get the native Response Message
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.GraphResponse.Dispose">
            <summary>
            Cleanup
            </summary>
        </member>
        <member name="T:Microsoft.Graph.GraphResponse`1">
            <summary>
            The GraphResponse Object
            </summary>
        </member>
        <member name="M:Microsoft.Graph.GraphResponse`1.#ctor(Microsoft.Kiota.Abstractions.RequestInformation,System.Net.Http.HttpResponseMessage)">
            <summary>
            The GraphResponse Constructor
            </summary>
            <param name="requestInformation">The Request made for the response</param>
            <param name="httpResponseMessage">The response</param>
        </member>
        <member name="M:Microsoft.Graph.GraphResponse`1.GetResponseObjectAsync(Microsoft.Kiota.Abstractions.IResponseHandler,System.Collections.Generic.Dictionary{System.String,Microsoft.Kiota.Abstractions.Serialization.ParsableFactory{Microsoft.Kiota.Abstractions.Serialization.IParsable}})">
            <summary>
            Gets the deserialized object 
            </summary>
            <param name="responseHandler">The response handler to use for the reponse</param>
            <param name="errorMappings">The errorMappings to use in the event of a non sucess request</param>
        </member>
        <member name="T:Microsoft.Graph.IAsyncMonitor`1">
            <summary>
            Monitor for async operations to the Graph service on the client.
            </summary>
            <typeparam name="T">The object type to return.</typeparam>
        </member>
        <member name="M:Microsoft.Graph.IAsyncMonitor`1.PollForOperationCompletionAsync(System.IProgress{Microsoft.Graph.AsyncOperationStatus},System.Threading.CancellationToken)">
            <summary>
            Poll to check for completion of an async call to the Graph service.
            </summary>
            <param name="progress">The progress status.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The operation task.</returns>
        </member>
        <member name="T:Microsoft.Graph.IBaseClient">
            <summary>
            A default client interface.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IBaseClient.RequestAdapter">
            <summary>
            Gets the <see cref="T:Microsoft.Kiota.Abstractions.IRequestAdapter"/> for sending requests.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.IBaseClient.Batch">
            <summary>
            Gets the <see cref="T:Microsoft.Graph.Core.Requests.BatchRequestBuilder"/> for building batch Requests
            </summary>
        </member>
        <member name="T:Microsoft.Graph.GraphTelemetryHandler">
            <summary>
            A <see cref="T:System.Net.Http.DelegatingHandler"/> implementation that telemetry for graph.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.GraphTelemetryHandler.assemblyVersion">
            The version for current assembly.
        </member>
        <member name="F:Microsoft.Graph.GraphTelemetryHandler.SdkVersionHeaderValue">
            The value for the SDK version header.
        </member>
        <member name="M:Microsoft.Graph.GraphTelemetryHandler.#ctor(Microsoft.Graph.GraphClientOptions)">
            <summary>
            The <see cref="T:Microsoft.Graph.GraphClientOptions"/> constructor.
            </summary>
            <param name="graphClientOptions"></param>
        </member>
        <member name="M:Microsoft.Graph.GraphTelemetryHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sends a HTTP request.
            </summary>
            <param name="httpRequest">The <see cref="T:System.Net.Http.HttpRequestMessage"/> to be sent.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> for the request.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Graph.ResponseHandler`1">
            <summary>
            Provides method(s) to deserialize raw HTTP responses into strong types.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.ResponseHandler`1.#ctor(Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.ResponseHandler`1"/>.
            </summary>
            <param name="parseNodeFactory"> The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory"/> to use for response handling</param>
        </member>
        <member name="M:Microsoft.Graph.ResponseHandler`1.HandleResponseAsync``2(``0,System.Collections.Generic.Dictionary{System.String,Microsoft.Kiota.Abstractions.Serialization.ParsableFactory{Microsoft.Kiota.Abstractions.Serialization.IParsable}})">
            <summary>
            Process raw HTTP response into requested domain type.
            </summary>
            <typeparam name="NativeResponseType">The type of the response</typeparam>
            <typeparam name="ModelType">The type to return</typeparam>
            <param name="response">The HttpResponseMessage to handle</param>
            <param name="errorMappings">The errorMappings to use in the event of failed requests</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.ResponseHandler`1.ValidateSuccessfulResponse(System.Net.Http.HttpResponseMessage,System.Collections.Generic.Dictionary{System.String,Microsoft.Kiota.Abstractions.Serialization.ParsableFactory{Microsoft.Kiota.Abstractions.Serialization.IParsable}})">
            <summary>
            Validates the HttpResponse message is a successful response. Otherwise, throws a ServiceException with the error information
            present in the response body.
            </summary>
            <param name="httpResponseMessage">The <see cref="T:System.Net.Http.HttpResponseMessage"/> to validate</param>
            <param name="errorMapping">The errorMappings to use in the event of failed requests</param>
        </member>
        <member name="T:Microsoft.Graph.UploadResponseHandler">
            <summary>
            The ResponseHandler for upload requests
            </summary>
        </member>
        <member name="M:Microsoft.Graph.UploadResponseHandler.#ctor(Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Graph.UploadResponseHandler"/>.
            </summary>
            <param name="parseNodeFactory"> The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParseNodeFactory"/> to use for response handling</param>
        </member>
        <member name="M:Microsoft.Graph.UploadResponseHandler.HandleResponse``1(System.Net.Http.HttpResponseMessage)">
            <summary>
            Process raw HTTP response from Upload request
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="response">The HttpResponseMessage to handle.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.UploadSessionRequestBuilder.#ctor(Microsoft.Graph.IUploadSession,Microsoft.Kiota.Abstractions.IRequestAdapter)">
            <summary>
            Create a new UploadSessionRequest
            </summary>
            <param name="uploadSession">The IUploadSession to use in the request.</param>
            <param name="requestAdapter">The <see cref="T:Microsoft.Kiota.Abstractions.IRequestAdapter"/> for handling requests.</param>
        </member>
        <member name="M:Microsoft.Graph.UploadSessionRequestBuilder.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
            Deletes the specified Session
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to use for cancelling requests</param>
            <returns>The task to await.</returns>
        </member>
        <member name="M:Microsoft.Graph.UploadSessionRequestBuilder.CreateDeleteRequestInformationAsync">
            <summary>
            Creates <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> instance for a DELETE request
            </summary>
            <returns>The <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> instance.</returns>
        </member>
        <member name="M:Microsoft.Graph.UploadSessionRequestBuilder.GetAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the specified UploadSession.
            </summary>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to use for cancelling requests</param>
            <returns>The Item.</returns>
        </member>
        <member name="M:Microsoft.Graph.UploadSessionRequestBuilder.CreateGetRequestInformationAsync">
            <summary>
            Creates <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> instance for a GET request
            </summary>
            <returns>The <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> instance.</returns>
        </member>
        <member name="P:Microsoft.Graph.UploadSliceRequestBuilder`1.RangeBegin">
            <summary>
            The beginning of the slice range to send.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.UploadSliceRequestBuilder`1.RangeEnd">
            <summary>
            The end of the slice range to send.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.UploadSliceRequestBuilder`1.TotalSessionLength">
            <summary>
            The length in bytes of the session.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.UploadSliceRequestBuilder`1.RangeLength">
            <summary>
            The range length of the slice to send.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.UploadSliceRequestBuilder`1.#ctor(System.String,Microsoft.Kiota.Abstractions.IRequestAdapter,System.Int64,System.Int64,System.Int64)">
            <summary>
            Request for uploading one slice of a session
            </summary>
            <param name="sessionUrl">URL to upload the slice.</param>
            <param name="requestAdapter">Client used for sending the slice.</param>
            <param name="rangeBegin">Beginning of range of this slice</param>
            <param name="rangeEnd">End of range of this slice</param>
            <param name="totalSessionLength">Total session length. This MUST be consistent
            across all slice.</param>
        </member>
        <member name="M:Microsoft.Graph.UploadSliceRequestBuilder`1.PutAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Uploads the slice using PUT.
            </summary>
            <param name="stream">Stream of data to be sent in the request. Length must be equal to the length
            of this slice (as defined by this.RangeLength)</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> to use for cancelling requests</param>
            <returns>The status of the upload. If UploadSession.AdditionalData.ContainsKey("successResponse")
            is true, then the item has completed, and the value is the created item from the server.</returns>
        </member>
        <member name="M:Microsoft.Graph.UploadSliceRequestBuilder`1.CreatePutRequestInformationAsync(System.IO.Stream)">
            <summary>
            Create <see cref="T:Microsoft.Kiota.Abstractions.RequestInformation"/> instance to upload the file slice
            <param name="stream">The <see cref="T:System.IO.Stream"/> to upload</param>
            </summary>
        </member>
        <member name="T:Microsoft.Graph.LargeFileUploadTask`1">
            <summary>
            Task to help with resume able large file uploads.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.#ctor(Microsoft.Kiota.Abstractions.Serialization.IParsable,System.IO.Stream,System.Int32,Microsoft.Graph.IBaseClient)">
            <summary>
            Task to help with resume able large file uploads. Generates slices based on <paramref name="uploadSession"/>
            information, and can control uploading of requests/>
            </summary>
            <param name="uploadSession">Session information of type <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParsable"/>></param>
            <param name="uploadStream">Readable, seekable stream to be uploaded. Length of session is determined via uploadStream.Length</param>
            <param name="maxSliceSize">Max size of each slice to be uploaded. Multiple of 320 KiB (320 * 1024) is required.</param>
            <param name="baseClient"><see cref="T:Microsoft.Graph.IBaseClient"/> to use for making upload requests. The client should not set Auth headers as upload urls do not need them.
            If less than 0, default value of 5 MiB is used. .</param>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.ExtractSessionFromParsable(Microsoft.Kiota.Abstractions.Serialization.IParsable)">
            <summary>
            Extract an <see cref="T:Microsoft.Graph.IUploadSession"/> from an <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParsable"/>
            </summary>
            <param name="uploadSession"><see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParsable"/> to initiaze an <see cref="T:Microsoft.Graph.IUploadSession"/> from</param>
            <returns>A <see cref="T:Microsoft.Graph.IUploadSession"/> instance</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.InitializeClient(System.String)">
            <summary>
            Initialize a baseClient to use for the upload that does not have Auth enabled as the upload URLs explicitly do not need authentication.
            </summary>
            <param name="uploadUrl">Url to perform the upload to from the session</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.UploadSliceAsync(Microsoft.Graph.UploadSliceRequestBuilder{`0},System.Collections.Generic.ICollection{System.Exception})">
            <summary>
            Write a slice of data using the UploadSliceRequest.
            </summary>
            <param name="uploadSliceRequestBuilder">The UploadSliceRequest to make the request with.</param>
            <param name="exceptionTrackingList">A list of exceptions to use to track progress. SlicedUpload may retry.</param>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.GetUploadSliceRequests">
            <summary>
            Get the series of requests needed to complete the upload session. Call <see cref="M:Microsoft.Graph.LargeFileUploadTask`1.UpdateSessionStatusAsync"/>
            first to update the internal session information.
            </summary>
            <returns>All requests currently needed to complete the upload session.</returns>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.UploadAsync(System.IProgress{System.Int64},System.Int32)">
            <summary>
            Upload the whole session.
            </summary>
            <param name="maxTries">Number of times to retry entire session before giving up.</param>
            <param name="progress">IProgress object to monitor the progress of the upload.</param>
            <returns>Item information returned by server.</returns>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.ResumeAsync(System.IProgress{System.Int64},System.Int32)">
            <summary>
            Get info about the upload session and resume from where it left off.
            </summary>
            <param name="maxTries">Number of times to retry entire session before giving up.</param>
            <param name="progress">IProgress object to monitor the progress of the upload.</param>
            <returns>Item information returned by server.</returns>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.UpdateSessionStatusAsync">
            <summary>
            Get the status of the session. Stores returned session internally.
            Updates internal list of ranges remaining to be uploaded (according to the server).
            </summary>
            <returns><see cref="T:Microsoft.Graph.IUploadSession"/>> returned by the server.</returns>
        </member>
        <member name="M:Microsoft.Graph.LargeFileUploadTask`1.DeleteSessionAsync">
            <summary>
            Delete the session.
            </summary>
            <returns>Once returned task is complete, the session has been deleted.</returns>
        </member>
        <member name="T:Microsoft.Graph.PageIterator`2">
            <summary>
            Use PageIterator&lt;TEntity&gt; to automatically page through result sets across multiple calls 
            and process each item in the result set.
            </summary>
            <typeparam name="TEntity">The Microsoft Graph entity type returned in the result set.</typeparam>
            <typeparam name="TCollectionPage">The Microsoft Graph collection response type returned in the collection response.</typeparam>
        </member>
        <member name="P:Microsoft.Graph.PageIterator`2.Deltalink">
            <summary>
            The @odata.deltaLink returned from a delta query.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.PageIterator`2.Nextlink">
            <summary>
            The @odata.nextLink returned in a paged result.
            </summary>
        </member>
        <member name="P:Microsoft.Graph.PageIterator`2.State">
            <summary>
            The PageIterator state.
            </summary>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.CreatePageIterator(Microsoft.Graph.IBaseClient,`1,System.Func{`0,System.Boolean},System.Func{Microsoft.Kiota.Abstractions.RequestInformation,Microsoft.Kiota.Abstractions.RequestInformation})">
            <summary>
            Creates the PageIterator with the results of an initial paged request. 
            </summary>
            <param name="client">The GraphServiceClient object used to create the NextPageRequest for a delta query.</param>
            <param name="page">A generated implementation of ICollectionPage.</param>
            <param name="callback">A Func delegate that processes type TEntity in the result set and should return false if the iterator should cancel processing.</param>
            <param name="requestConfigurator">A Func delegate that configures the NextPageRequest</param>
            <returns>A PageIterator&lt;TEntity&gt; that will process additional result pages based on the rules specified in Func&lt;TEntity,bool&gt; processPageItems</returns>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.IntrapageIterate">
            <summary>
            Iterate across the content of a a single results page with the callback.
            </summary>
            <returns>A boolean value that indicates whether the callback cancelled 
            iterating across the page results or whether there are more pages to page. 
            A return value of false indicates that the iterator should stop iterating.</returns>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.InterpageIterateAsync(System.Threading.CancellationToken)">
            <summary>
            Call the next page request when there is another page of data.
            </summary>
            <param name="token"></param>
            <returns>The task object that represents the results of this asynchronous operation.</returns>
            <exception cref="T:Microsoft.Graph.ServiceException">Thrown when the service encounters an error with
            a request.</exception>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.IterateAsync">
            <summary>
            Fetches page collections and iterates through each page of items and processes it according to the Func&lt;TEntity, bool&gt; set in <see cref="M:Microsoft.Graph.PageIterator`2.CreatePageIterator(Microsoft.Graph.IBaseClient,`1,System.Func{`0,System.Boolean},System.Func{Microsoft.Kiota.Abstractions.RequestInformation,Microsoft.Kiota.Abstractions.RequestInformation})"/>. 
            </summary>
            <returns>The task object that represents the results of this asynchronous operation.</returns>
            <exception cref="T:Microsoft.Graph.ServiceException">Thrown when the service encounters an error with
            a request.</exception>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.IterateAsync(System.Threading.CancellationToken)">
            <summary>
            Fetches page collections and iterates through each page of items and processes it according to the Func&lt;TEntity, bool&gt; set in <see cref="M:Microsoft.Graph.PageIterator`2.CreatePageIterator(Microsoft.Graph.IBaseClient,`1,System.Func{`0,System.Boolean},System.Func{Microsoft.Kiota.Abstractions.RequestInformation,Microsoft.Kiota.Abstractions.RequestInformation})"/>. 
            </summary>
            <param name="token">The CancellationToken used to stop iterating calls for more pages.</param>
            <returns>The task object that represents the results of this asynchronous operation.</returns>
            <exception cref="T:Microsoft.Graph.ServiceException">Thrown when the service encounters an error with
            a request or there is an internal error with the service.</exception>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.ResumeAsync">
            <summary>
            Resumes iterating through each page of items and processes it according to the Func&lt;TEntity, bool&gt; set in <see cref="M:Microsoft.Graph.PageIterator`2.CreatePageIterator(Microsoft.Graph.IBaseClient,`1,System.Func{`0,System.Boolean},System.Func{Microsoft.Kiota.Abstractions.RequestInformation,Microsoft.Kiota.Abstractions.RequestInformation})"/>. 
            </summary>
            <returns>The task object that represents the results of this asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.ResumeAsync(System.Threading.CancellationToken)">
            <summary>
            Resumes iterating through each page of items and processes it according to the Func&lt;TEntity, bool&gt; set in <see cref="M:Microsoft.Graph.PageIterator`2.CreatePageIterator(Microsoft.Graph.IBaseClient,`1,System.Func{`0,System.Boolean},System.Func{Microsoft.Kiota.Abstractions.RequestInformation,Microsoft.Kiota.Abstractions.RequestInformation})"/>. 
            </summary>
            <param name="token">The CancellationToken used to stop iterating calls for more pages.</param>
            <returns>The task object that represents the results of this asynchronous operation.</returns>
            <exception cref="T:Microsoft.Graph.ServiceException">Thrown when the service encounters an error with
            a request.</exception>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.ExtractEntityListFromParsable(`1)">
            <summary>
            Helper method to extract the collection rom an <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParsable"/> instance.
            </summary>
            <param name="parsableCollection">The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParsable"/> to extract the collection from</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Thrown when the object doesn't contain a collection inside it</exception>
        </member>
        <member name="M:Microsoft.Graph.PageIterator`2.ExtractNextLinkFromParsable(`1,System.String)">
            <summary>
            Helper method to extract the nextLink property from an <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParsable"/> instance.
            </summary>
            <param name="parsableCollection">The <see cref="T:Microsoft.Kiota.Abstractions.Serialization.IParsable"/> to extract the nextLink from</param>
            <param name="nextLinkPropertyName">The property name of the nextLink string</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Graph.PagingState">
            <summary>
            Specifies the state of the PageIterator.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.PagingState.NotStarted">
            <summary>
            The iterator has neither started iterating thorugh the initial page nor request more pages.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.PagingState.Paused">
            <summary>
            The callback returned false or a cancellation token was set. The iterator is resumeable.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.PagingState.IntrapageIteration">
            <summary>
            Iterating across the contents of page.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.PagingState.InterpageIteration">
            <summary>
            Iterating across paged requests.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.PagingState.Delta">
            <summary>
            A deltaToken was returned. The iterator is resumeable.
            </summary>
        </member>
        <member name="F:Microsoft.Graph.PagingState.Complete">
            <summary>
            Reached the end of a non-deltaLink paged result set.
            </summary>
        </member>
    </members>
</doc>
